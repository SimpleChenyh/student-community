<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.manage.mapper.authority.StudentMapper">
    <resultMap type="com.manage.entity.Student" id="stuSimpleResultMap">
        <id column="stu_id" property="stuid" />
        <result column="stu_name" property="stuName" />
        <result column="stu_sex" property="stuSex" />
        <result column="stu_birthday" property="stuBirthday" />
        <result column="stu_native_place" property="stuNativePlace" />
        <result column="role_name" property="roleName"/>
        <association property="classes" javaType="com.manage.entity.Classes">
            <id column="classes_id" property="classesid" />
            <result column="grade" property="grade" />
            <result column="classes" property="classes" />
            <result column="year" property="year" />
        </association>
    </resultMap>
    
    <sql id="stuColumn">
        s.stu_id,s.stu_pwd,s.stu_name,s.stu_sex,s.stu_birthday,s.stu_native_place
    </sql>
    <select id="getStudentByCommid" parameterType="int" resultType="com.manage.entity.Student" resultMap="stuSimpleResultMap">
        select
        <include refid="stuColumn" />
        ,cls.grade,cls.classes
        from student s
        INNER JOIN stu_community sc on s.stu_id = sc.stu_id
        INNER JOIN classes cls on
        s.classes_id = cls.classes_id
        where
        sc.community_id = #{id}
    </select>
    
    <select id="queryAllForStu" parameterType="map" resultType="com.manage.entity.Student" resultMap="stuSimpleResultMap">
        <if test="isClassesid == false"> 
           select c.stu_id,c.stu_name,c.stu_sex,CASE c.stu_sex WHEN 1 then '男' WHEN 0 then '女' END AS 'sex_name',c.role_name FROM (
            SELECT s.stu_id,s.stu_name,s.stu_sex,r.role_name FROM community_role cr
            INNER JOIN role r ON cr.role_id = r.role_id
            INNER JOIN stu_community_role scr ON scr.community_role_id = cr.community_role_id
            INNER JOIN student s ON scr.stu_id = s.stu_id
            where cr.community_id = 1
            ) c
            <if test="keyWord != null">
            and (CONCAT(c.stu_id,'')  like '%${keyWord}%'
                 or c.stu_name like '%${keyWord}%'
                 or c.sex_name like '%${keyWord}%')
                 or r.role_name like '%${keyWord}%'
            </if>
            LIMIT ${pageParam.startIndex},${pageParam.rows}
        </if>
        <if test="isClassesid == true">
            select * from (
            select *, case 
            when grade = 0 then '一年级'
            when grade = 1 then '二年级' 
            when grade = 2 then '三年级' 
            when grade = 3 then '四年级'
            else '已毕业'
            end as 'grade_name'
            from (
            select s.*,cls.classes,cls.grade,case s.stu_sex when 1 then '男' when 0 then '女' end as 'sex_name'
             from  classes cls inner join student s on cls.classes_id = s.classes_id
             ) t
            ) c 
            <if test="keyWord != null">
            where c.stu_name like '%${keyWord}%'
            or CONCAT(c.stu_birthday,'')  like '%${keyWord}%'
            or c.sex_name like '%${keyWord}%'
            </if>
            LIMIT ${pageParam.startIndex},${pageParam.rows}
        </if>
    </select>

    <select id="getCountForStu" parameterType="map" resultType="int">
        
        <if test="isClassesid == false">
        SELECT COUNT(*) FROM (
        SELECT c.stu_id,c.stu_name,c.stu_sex,CASE c.stu_sex WHEN 1 then '男' WHEN 0 then '女' END AS 'sex_name',c.role_name FROM (
        SELECT s.stu_id,s.stu_name,s.stu_sex,r.role_name FROM community_role cr
        INNER JOIN role r ON cr.role_id = r.role_id
        INNER JOIN stu_community_role scr ON scr.community_role_id = cr.community_role_id
        INNER JOIN student s ON scr.stu_id = s.stu_id
        where cr.community_id = 1
        ) c
            <if test="keyWord != null">
            and (CONCAT(c.stu_id,'')  like '%${keyWord}%'
                 or c.stu_name like '%${keyWord}%'
                 or c.sex_name like '%${keyWord}%')
                 or r.role_name like '%${keyWord}%'
            </if>
        ) t
        </if>
        <if test="isClassesid == true"> 
            select COUNT(*) from (
            select * from (select *, case  
            when grade = 0 then '一年级' 
            when grade = 1 then '二年级' 
            when grade = 2 then '三年级' 
            when grade = 3 then '四年级' 
            else '已毕业' end as 'grade_name'
             from (select s.*,cls.classes,cls.grade,case s.stu_sex when 1 then '男' when 0 then '女' end as 'sex_name'
            from  classes cls inner join student s on cls.classes_id = s.classes_id) t) b 
            ) c
           <if test="keyWord != null">
            where c.stu_name like '%${keyWord}%'
            or CONCAT(c.stu_id,'')  like '%${keyWord}%'
            or CONCAT(c.stu_birthday,'')  like '%${keyWord}%'
            or c.sex_name like '%${keyWord}%'
            </if>
        </if>
    </select>
    
    <select id="getAllManager" parameterType="map" resultType="com.manage.entity.Student"
         resultMap="stuSimpleResultMap">
        select * from (
        select s.*, case s.stu_sex when 1 then '男' when 0 then '女' end as 'sex_name'
        from   student s ) c where c.classes_id is  null
        <if test="keyWord != null">
        CONCAT(c.stu_id,'')  like '%1%' 
        or c.stu_name like '%${keyWord}%'
        or CONCAT(c.stu_birthday,'')  like '%${keyWord}%'
        or c.sex_name like '%${keyWord}%'
        </if>
        LIMIT ${pageParam.startIndex},${pageParam.rows}
     </select>
     
     <select id="queryOne" parameterType="int" resultType="com.manage.entity.Student"  resultMap="stuSimpleResultMap">
        select s.*,cls.classes,cls.grade
        from  classes cls inner join student s on cls.classes_id = s.classes_id
        where s.stu_id = #{id}
     </select>
     
     <select id="getNewMgrid" resultType="java.lang.Integer">
        select stu_id from student ORDER BY stu_id desc LIMIT 0,1
     </select>  
     
     <select id="stuFrontLogin" parameterType="com.manage.entity.Student" resultType="Integer">
        SELECT COUNT(*) FROM  student 
        where classes_id IS NOT NULL
        AND stu_id = #{stuid} AND stu_pwd = #{stuPwd}
     </select>
     
     <select id="stuBackLogin" parameterType="com.manage.entity.Student" resultType="Integer">
        SELECT COUNT(*) FROM  student 
        where classes_id IS  NULL
        AND stu_id = #{stuid} AND stu_pwd = #{stuPwd}
     </select>
     
    <insert id="save" parameterType="com.manage.entity.Student" 
            keyProperty="stuid" useGeneratedKeys="true">
          <if test="stuBirthday != null">
                INSERT INTO `student` (`stu_name`, `stu_sex`, `stu_birthday`, `stu_native_place`, `classes_id`) 
                VALUES (#{stuName}, #{stuSex}, #{stuBirthday}, #{stuNativePlace}, #{classes.classesid})
          </if>
          <if test="stuBirthday == null">
                INSERT INTO `student` (`stu_name`, `stu_sex`) 
                VALUES (#{stuName}, #{stuSex})
          </if>      
    </insert>
    
    <insert id="joinCommunity" parameterType="map">
         INSERT INTO stu_community(stu_id,community_id)
        VALUES(#{studentid},#{communityid})
        
        
    </insert>

    <update id="update" parameterType="com.manage.entity.Student">
       UPDATE student SET stu_name=#{stuName}, stu_sex=#{stuSex}, stu_birthday=#{stuBirthday},
        stu_native_place=#{stuNativePlace}, classes_id=#{classes.classesid} WHERE stu_id = #{stuid}
    </update>
     
    <delete id="delete">
        DELETE FROM student WHERE stu_id in
        <foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete> 
         
</mapper>